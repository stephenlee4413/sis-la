names(words_data)[3]
words_data
spread(words_data,words_data$meaingful_words)
new_data
test_spread_data <- words_data[2:3]
test_spread_data
spread(test_spread_data,test_spread_data$students)
spread(test_spread_data,test_spread_data$meaingful_words)
t(test_spread_data)
head(t(test_spread_data),x = 1)
head(t(test_spread_data),n = 1)
head(t(test_spread_data))
devtools::install_github("bradleyboehmke/harrypotter")
install.packages("tidytext")
install.packages("ggraph")
library(ggraph)
library(ggplot2)
install.packages("widyr")
library(help='widyr')
install.packages("gapminder")
library(gapminder)
gapminder
gapminder%>%
pairwise_dist(country,year)
library(widyr)
pairwise_dist(gapminder$country,gapminder$lifeExp)
gapminder %>%
pairwise_dist(country,year)
library(tidyverse)
gapminder %>%
pairwise_dist(country,year)
gapminder %>%
pairwise_dist(country, year, lifeExp)
gapminder %>%
pairwise_dist(country, year, lifeExp) %>%
arrange(distance)
help("arrange")
gapminder %>%
pairwise_dist(country, year, lifeExp) %>%
arrange(desc(distance))
gapminder
unique(gapminder$continent)
unique(gapminder$country)
gapminder %>%
pairwise_cor(country,year,lifeExp) %>%
arrange(desc(cor))
gapminder %>%
pairwise_cor(country,year,lifeExp)
gapminder %>%
pairwise_cor(country,year,lifeExp) %>%
arrange(desc(correlation))
install.packages("janeaustenr")
install.packages("janeaustenr")
library(help='janeaustenr')
austen_books
library(janeaustenr)
austen_books()
head(austen_books())
head(austen_books(),n=10)
head(austen_books(),n=100)
head(austen_books(),n=50)
library(tidytext)
help("unnest_tokens")
austen_books() %>%
unnest_tokens(bigram,text,token = 'ngrams',n=2)
library(tidyverse)
austen_bigrams <- austen_books() %>%
unnest_tokens(bigram,text,token = 'ngrams',n=2)
austen_bigrams
austen_bigrams %>% count(bigram,sort = TRUE)
stop_words
??stop_words
austen_bigrams_meaningfulWords <- austen_bigrams %>%
filter()
austen_bigrams
stop_words
austen_bigrams_separate <- austen_bigrams %>%
separate(bigram,c('word1','word2'),sep=" ")
austen_bigrams_separate
austen_bigrams_meaningfulWords <- austen_bigrams_separate %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words)
austen_bigrams_meaningfulWords <- austen_bigrams_separate %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
austen_bigrams_meaningfulWords
austen_bigrams_meaningfulWords <- austen_bigrams_meaningfulWords %>%
filter(!is.numeric(word2))
austen_bigrams_meaningfulWords
help("filter")
austen_bigrams_meaningfulWords <- austen_bigrams_meaningfulWords %>%
filter(word2 ! is.numeric(word2))
austen_bigrams_meaningfulWords <- austen_bigrams_meaningfulWords %>%
filter(!is.numeric(word2)) %>%
filter(!is.numeric(word1))
austen_bigrams_meaningfulWords
austen_bigrams_meaningfulWords <- austen_bigrams_meaningfulWords %>%
filter(!!is.numeric(word2))
austen_bigrams_meaningfulWords <- austen_bigrams_meaningfulWords %>%
austen_bigrams_meaningfulWords <- austen_bigrams_meaningfulWords %>%
;
austen_bigrams_meaningfulWords_count <- austen_bigrams_meaningfulWords %>%
count(word1,word2,sort = TRUE)
austen_bigrams_meaningfulWords_count
austen_bigrams_meaningfulWords_unite <- austen_bigrams_meaningfulWords %>%
unite(word1,word2,sep=" ")
austen_bigrams_meaningfulWords_unite
austen_bigrams_meaningfulWords_unite <- austen_bigrams_meaningfulWords %>%
unite(bigram,word1,word2,sep=" ")
austen_bigrams_meaningfulWords_unite
austen_bigrams_meaningfulWords_count
austen_graph <- c()
library(igraph)
austen_graph <- graph_from_data_frame(austen_bigrams_meaningfulWords_count)
austen_graph
plot(austen_graph)
austen_graph <- austen_bigrams_meaningfulWords_count %>%
filter(n>20)
austen_graph <- graph_from_data_frame(austen_bigrams_meaningfulWords_count)
plot(austen_graph)
austen_visnetwork <- c()
library(visNetwork)
austen_visnetwork <- toVisNetworkData(austen_graph)
austen_graph
names(austen_graph)
class(austen_graph)
attr(austen_graph)
summary(austen_graph)
austen_graph$nodes
austen_graph$edges
visNetwork(austen_graph)
austen_bigrams_meaningfulWords_count <- austen_bigrams_meaningfulWords_count %>%
filter(n>80)
austen_graph <- graph_attr_names(austen_bigrams_meaningfulWords_count)
austen_bigrams_meaningfulWords_count
austen_graph <- graph_from_data_frame(austen_bigrams_meaningfulWords_count)
austen_graph
plot(austen_graph)
austen_graph_vis <- toVisNetworkData(austen_graph)
austen_graph_vis
visNetwork(austen_graph_vis$nodes,austen_graph_vis$edges)
austen_bigrams_meaningfulWords_count <- austen_bigrams_meaningfulWords_count %>%
filter(n>50)
austen_graph <- graph_from_data_frame(austen_bigrams_meaningfulWords_count)
austen_graph
austen_graph_vis <- toVisNetworkData(austen_graph)
visNetwork(austen_graph_vis)
visNetwork(austen_graph_vis$nodes,austen_graph_vis$edges)
visNetwork(austen_graph_vis$nodes,austen_graph_vis$edges)visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1, type = 'arrow')))%>%visOptions(highlightNearest = list(degree=1,hover=T),nodesIdSelection = TRUE)
visNetwork(austen_graph_vis$nodes,austen_graph_vis$edges)%>%visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1, type = 'arrow')))%>%visOptions(highlightNearest = list(degree=1,hover=T),nodesIdSelection = TRUE)
austen_graph_vis$nodes$shape <- 'circle'
visNetwork(austen_graph_vis$nodes,austen_graph_vis$edges)%>%visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1, type = 'arrow')))%>%visOptions(highlightNearest = list(degree=1,hover=T),nodesIdSelection = TRUE)
library(ggraph)
ggraph(austen_graph)
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(austen_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
austen_bigrams_meaningfulWords_count <- austen_bigrams_meaningfulWords %
austen_bigrams_meaningfulWords_count <- austen_bigrams_meaningfulWords %>%
filter(n>50)
austen_bigrams_meaningfulWords
austen_bigrams_meaningfulWords_count
austen_bigrams_meaningfulWords_count <- austen_bigrams_meaningfulWords %>%
count(word1,word2)
austen_bigrams_meaningfulWords_count
austen_bigrams_meaningfulWords_count <- austen_bigrams_meaningfulWords %>%
count(word1,word2,sort = TRUE)
austen_bigrams_meaningfulWords_count
austen_words_count <-  austen_bigrams_meaningfulWords_count %>%
filter(n>50)
austen_words_count
austen_words_count <-  austen_bigrams_meaningfulWords_count %>%
filter(n>20)
austen_words_count
austen_graph <- graph_from_data_frame()
austen_graph <- graph_from_data_frame(austen_words_count)
plot(austen_graph)
austen_graph_vis <- toVisNetworkData(austen_graph)
visNetwork(austen_graph_vis$nodes,austen_graph_vis$edges)
austen_graph_vis$nodes$shape <- 'circle'
visNetwork(austen_graph_vis$nodes,austen_graph_vis$edges)
visNetwork(austen_graph_vis$nodes,austen_graph_vis$edges)%>%visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1, type = 'arrow')))%>%visOptions(highlightNearest = list(degree=1,hover=T),nodesIdSelection = TRUE)
text_raw_data <- read.csv('/Users/lee/Desktop/课程内容/网络学习分析/datasets/all_code.csv',stringsAsFactors = FALSE)
text_message_person <- as_tibble(text_raw_data[1:3])
#### term to term analytic###
library(tidytext) #clean text raw data
library(tidyverse)
library(widyr) #calculate the relation among terms
library(ggraph) #visualization terms
library(igraph)
library(visNetwork)
text_raw_data <- read.csv('/Users/lee/Desktop/课程内容/网络学习分析/datasets/all_code.csv',stringsAsFactors = FALSE)
text_message_person <- as_tibble(text_raw_data[1:3])
text_message_person
text_message_person <- as_tibble(text_raw_data[1:3])
#split term by ngrams number ,2 as default used  #
text_bigram_data <- text_message_person %>%
unnest_tokens(bigram,message_text,token = 'ngrams',n=2)
text_bigram_count <- text_bigram_data %>%
count(bigram,sort = TRUE)
text_bigram_count
text_message_person
text_person_words <- text_message_person[c('vert1_id','message')]
text_person_words <- text_message_person[c('vert1_id','message_text')]
text_person_words
names(text_person_words)
names(text_person_words) <- c('learners','messages')
names(text_person_words)
text_person_words
text_person_words <- text_person_words %>%
unnest_tokens(bigram,messages,token = 'ngrams',n=2)
text_person_words
text_person_words <- text_person_words %>%
separate(bigram,c('wd1','wd2'),sep=' ')
text_person_words
text_person_words <- text_person_words %>%
separate(bigram,c('wd1','wd2'),sep=' ') %>%
count(wd1,wd2,learners,sort = TRUE)
text_person_words <- text_person_words %>%
unnest_tokens(bigram,messages,token = 'ngrams',n=2)
text_person_words <- text_person_words %>%
separate(bigram,c('wd1','wd2'),sep=' ') %>%
count(wd1,wd2,learners,sort = TRUE)
text_person_words <- text_message_person[c('vert1_id','message')]
names(text_person_words) <- c('learners','messages')
text_person_words <- text_person_words %>%
unnest_tokens(bigram,messages,token = 'ngrams',n=2)
text_person_words <- text_person_words %>%
separate(bigram,c('wd1','wd2'),sep=' ') %>%
count(wd1,wd2,learners,sort = TRUE)
text_person_words <- text_message_person[c('vert1_id','message')]
names(text_person_words) <- c('learners','messages')
text_person_words <- text_message_person[c('vert1_id','message_text')]
names(text_person_words) <- c('learners','messages')
text_person_words <- text_person_words %>%
unnest_tokens(bigram,messages,token = 'ngrams',n=2)
text_person_words <- text_person_words %>%
separate(bigram,c('wd1','wd2'),sep=' ') %>%
count(wd1,wd2,learners,sort = TRUE)
text_person_words
text_person_words <- text_person_words %>%
filter(!wd1 %in% stop_words$word)%>%
filter(!wd2 %in% stop_words$word)
text_person_words
write.csv(text_person_words,'/Users/lee/Desktop/person_words.csv')
text_person_words_count2 <- text_person_words %>%
filter(n>=2)
text_person_words_count2
text_person_words_unite <- text_person_words_count2 %>%
unite('words',wd:wd2)
text_person_words_unite <- text_person_words_count2 %>%
unite('words',wd1:wd2)
text_person_words_unite
text_person_words_unite <- text_person_words_count2 %>%
unite('words',wd1:wd2,sep='')
text_person_words_unite
text_person_words_unite <- text_person_words_count2 %>%
unite('words',wd1:wd2,sep=' ')
text_person_words_unite
graph_person_words <- graph_from_data_frame(text_person_words_unite)
graph_person_words
plot(graph_person_words)
graph_person_words_vis <- toVisNetworkData(graph_person_words)
visNetwork(graph_person_words_vis$nodes,graph_person_words_vis$edges)
graph_person_words_vis$nodes$shape <- 'circle'
visNetwork(graph_person_words_vis$nodes,graph_person_words_vis$edges)
visNetwork(graph_person_words_vis$nodes,graph_person_words_vis$edges) %>%
visEdges(arrows = list(to = list(enabled = TRUE, type = 'arrow'))) %>%
visOptions(highlightNearest = list(degree=1,hover=T),nodesIdSelection = TRUE)
graph_person_words_vis$nodes
# text_person_words <- text_person_words %>%
#   separate(bigram,c('wd1','wd2'),sep=' ') %>%
#   count(wd1,wd2,learners,sort = TRUE)
text_person_words <- text_person_words %>%
separate(bigram,c('wd1','wd2'),sep=' ') %>%
count(learners,wd1,wd2,sort = TRUE)
text_person_words <- text_message_person[c('vert1_id','message_text')]
names(text_person_words) <- c('learners','messages')
text_person_words <- text_person_words %>%
unnest_tokens(bigram,messages,token = 'ngrams',n=2)
# text_person_words <- text_person_words %>%
#   separate(bigram,c('wd1','wd2'),sep=' ') %>%
#   count(wd1,wd2,learners,sort = TRUE)
text_person_words <- text_person_words %>%
separate(bigram,c('wd1','wd2'),sep=' ') %>%
count(learners,wd1,wd2,sort = TRUE)
text_person_words <- text_person_words %>%
filter(!wd1 %in% stop_words$word)%>%
filter(!wd2 %in% stop_words$word)
text_person_words
text_person_words_count2 <- text_person_words %>%
filter(n>=2)
text_person_words_unite <- text_person_words_count2 %>%
unite('words',wd1:wd2,sep=' ')
graph_person_words <- graph_from_data_frame(text_person_words_unite)
graph_person_words_vis <- toVisNetworkData(graph_person_words)
graph_person_words_vis$nodes
graph_person_words_vis$edges
tail(graph_person_words_vis$edges)
tail(graph_person_words_vis$edges,n=100)
tail(graph_person_words_vis$edges,n=300)
write.csv(graph_person_words_vis$edges,'/Users/lee/Desktop/rel.csv')
degree(graph_person_words)
#color
graph_person_words_color <- generateVcolor(
as.integer(degree(graph_person_words))
)
graph_person_words_color
graph_person_words_vis$nodes$color <- graph_person_words_color
graph_person_words_vis$nodes$shape <- 'circle'
visNetwork(graph_person_words_vis$nodes,graph_person_words_vis$edges) %>%
visEdges(arrows = list(to = list(enabled = TRUE, type = 'arrow'))) %>%
visOptions(highlightNearest = list(degree=1,hover=T),nodesIdSelection = TRUE)
text_person_words
table(text_person_words$n)
text_person_words <- text_message_person[c('vert1_id','message_text')]
names(text_person_words) <- c('learners','messages')
text_person_words <- text_person_words %>%
unnest_tokens(bigram,messages,token = 'ngrams',n=2)
# text_person_words <- text_person_words %>%
#   separate(bigram,c('wd1','wd2'),sep=' ') %>%
#   count(wd1,wd2,learners,sort = TRUE)
text_person_words <- text_person_words %>%
separate(bigram,c('wd1','wd2'),sep=' ') %>%
count(learners,wd1,wd2,sort = TRUE)
text_person_words <- text_person_words %>%
filter(!wd1 %in% stop_words$word)%>%
filter(!wd2 %in% stop_words$word)
text_person_words_count2 <- text_person_words %>%
filter(n>=3)
text_person_words_unite <- text_person_words_count2 %>%
unite('words',wd1:wd2,sep=' ')
graph_person_words <- graph_from_data_frame(text_person_words_unite)
graph_person_words_vis <- toVisNetworkData(graph_person_words)
#color
graph_person_words_color <- generateVcolor(
as.integer(degree(graph_person_words))
)
graph_person_words_vis$nodes$color <- graph_person_words_color
graph_person_words_vis$nodes$shape <- 'circle'
visNetwork(graph_person_words_vis$nodes,graph_person_words_vis$edges) %>%
visEdges(arrows = list(to = list(enabled = TRUE, type = 'arrow'))) %>%
visOptions(highlightNearest = list(degree=1,hover=T),nodesIdSelection = TRUE)
#### term to term analytic###
library(tidytext) #clean text raw data
library(tidyverse)
library(widyr) #calculate the relation among terms
library(ggraph) #visualization terms
library(igraph)
library(visNetwork)
text_raw_data <- read.csv('/Users/lee/Desktop/课程内容/网络学习分析/datasets/all_code.csv',stringsAsFactors = FALSE)
text_message_person <- as_tibble(text_raw_data[1:3])
#split term by ngrams number ,2 as default used  #
text_bigram_data <- text_message_person %>%
unnest_tokens(bigram,message_text,token = 'ngrams',n=2)
text_bigram_count <- text_bigram_data %>%
count(bigram,sort = TRUE)
#then you can count the associated words.
#then split the associated words into n column ,the coexist term will be shown.
text_bigram_count2 <- text_bigram_count %>%
separate(bigram,c('wd1','wd2'),sep=' ')
# del unuseful words ,del stop words.
text_bigram_count2 <- text_bigram_count2 %>%
filter(!wd1 %in% stop_words$word,!wd2 %in% stop_words$word)
# convert data to igraph data structure.
text_bigram_count3 <- text_bigram_count2 %>%
filter(n>6)
text_bigram_graph <- graph_from_data_frame(text_bigram_count3)
# if you change the size of vertext or vertex's label
# V(text_graph)$label.cex = 0.6
# V(text_graph)$size = 10
# E(text_graph)$size=.3
# E(text_graph)$color <- 'lightblue'
# this graph is so not beautiful,we choos another tool for visualization
library(visNetwork)
text_vis_data <- toVisNetworkData(text_bigram_graph)
text_bigram_graph_color <- generateVcolor(as.integer(degree(text_bigram_graph)))
# text_vis_data$nodes$shape <- 'circle'
text_vis_data$nodes$color <- text_bigram_graph_color  #gradient color from red to green
# change vertex size in terms of degree
degree_value <- degree(text_bigram_graph,mode='all')
text_vis_data$nodes$size <- degree_value[match(text_vis_data$nodes$id,names(degree_value))]*5
text_vis_data$nodes$shape <- 'circle'
visNetwork(text_vis_data$nodes,text_vis_data$edges,smooth=TRUE) %>%
visNodes(scaling = list(label = list(enabled = T)))%>%
visEdges(arrows = list(to = list(enabled = TRUE, type = 'arrow'))) %>%
visOptions(highlightNearest = list(degree=1,hover=T),nodesIdSelection = TRUE)
#### term to term analytic###
library(tidytext) #clean text raw data
library(tidyverse)
library(widyr) #calculate the relation among terms
library(ggraph) #visualization terms
library(igraph)
library(visNetwork)
text_raw_data <- read.csv('/Users/lee/Desktop/课程内容/网络学习分析/datasets/all_code.csv',stringsAsFactors = FALSE)
text_message_person <- as_tibble(text_raw_data[1:3])
#split term by ngrams number ,2 as default used  #
text_bigram_data <- text_message_person %>%
unnest_tokens(bigram,message_text,token = 'ngrams',n=2)
text_bigram_count <- text_bigram_data %>%
count(bigram,sort = TRUE)
#then you can count the associated words.
#then split the associated words into n column ,the coexist term will be shown.
text_bigram_count2 <- text_bigram_count %>%
separate(bigram,c('wd1','wd2'),sep=' ')
# del unuseful words ,del stop words.
text_bigram_count2 <- text_bigram_count2 %>%
filter(!wd1 %in% stop_words$word,!wd2 %in% stop_words$word)
# convert data to igraph data structure.
text_bigram_count3 <- text_bigram_count2 %>%
filter(n>8)
text_bigram_graph <- graph_from_data_frame(text_bigram_count3)
# if you change the size of vertext or vertex's label
# V(text_graph)$label.cex = 0.6
# V(text_graph)$size = 10
# E(text_graph)$size=.3
# E(text_graph)$color <- 'lightblue'
# this graph is so not beautiful,we choos another tool for visualization
library(visNetwork)
text_vis_data <- toVisNetworkData(text_bigram_graph)
text_bigram_graph_color <- generateVcolor(as.integer(degree(text_bigram_graph)))
# text_vis_data$nodes$shape <- 'circle'
text_vis_data$nodes$color <- text_bigram_graph_color  #gradient color from red to green
# change vertex size in terms of degree
degree_value <- degree(text_bigram_graph,mode='all')
text_vis_data$nodes$size <- degree_value[match(text_vis_data$nodes$id,names(degree_value))]*5
text_vis_data$nodes$shape <- 'circle'
visNetwork(text_vis_data$nodes,text_vis_data$edges,smooth=TRUE) %>%
visNodes(scaling = list(label = list(enabled = T)))%>%
visEdges(arrows = list(to = list(enabled = TRUE, type = 'arrow'))) %>%
visOptions(highlightNearest = list(degree=1,hover=T),nodesIdSelection = TRUE)
shiny::runApp('Desktop/课程内容/网络学习分析/report')
runApp('Desktop/课程内容/网络学习分析/report')
runApp('Desktop/课程内容/网络学习分析/report')
shiny::runApp('Desktop/课程内容/网络学习分析/report')
runApp('Desktop/课程内容/网络学习分析/report')
runApp('Desktop/课程内容/网络学习分析/report')
runApp('Desktop/课程内容/网络学习分析/report')
shiny::runApp('Desktop/sis-la')
runApp('Desktop/sis-la')
shiny::runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
shiny::runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
sna_data
sna_da
colnames(sna_data)
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
library(igraph)
library(LagSeq)
library(dplyr)
#load required dataset
sa_data <- read.csv('/Users/lee/Desktop/课程内容/网络学习分析/datasets/sa_data.csv')
sa_data <- as.vector(sa_data$code)
#transfer character code to numberic code
sa_code_data <- case_when(sa_data == 'SKI'~1,sa_data=='MKI'~2,sa_data=='DKI'~3,sa_data=='SKC'~4,sa_data=='MKC'~5,sa_data=='DKC'~6)
sa_freq <- as.matrix(LagSeq(sa_code_data)$freq)
#build graph data
sa_graph_freq_data <- graph_from_adjacency_matrix(sa_freq,weighted = TRUE)
#the following edges' width be larger than we expected.
E(sa_graph_freq_data)$width<-c(6,3,3,2,42,83,8,21,3,58,125,14,55,1,1,11,5,20,45,4,3,35,35,41,100,25,2,4,5,4,15,7)
# we change the width of edges.
E(sa_graph_freq_data)$width <- E(sa_graph_freq_data)$width/20
E(sa_graph_freq_data)$color <- 'lightblue'
size=c(12,158,255,87,239,36)
plot(sa_graph_freq_data, edge.arrow.size=0,edge.curved=.5,
layout=layout_in_circle,
vertex.label=c("SKI","MKI","DKI","SKC","MKC","DKC"),
vertex.frame.color="grey38",vertex.label.color="black",vertex.color="slateblue2",
vertex.size=size^0.5/0.7)
#####--igraph图形转换成visnetwork--###
library(visNetwork)
#the igraph data structure can't be used by visNetwork directly.
#transform igraph data to visNetwork data
sa_vis_graph_data <- toVisNetworkData(sa_graph_freq_data)
sa_vis_graph_data$nodes$shape <- 'circle'
visNetwork(sa_vis_graph_data$nodes,sa_vis_graph_data$edges,smooth=TRUE)
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
shiny::runApp('Desktop/课程内容/网络学习分析/homework2')
shiny::runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
runApp('Desktop/课程内容/网络学习分析/homework2')
setwd('/Users/lee/Desktop/sis-la(version 0.2)/')
ls
dir
dir()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
